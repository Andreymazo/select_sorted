
def dec_cache(func):
    cache = {}
    def wrapper(high):
        if high[0] in cache:
            return high[0]
        cache[0] = func(high)
        return high[0]
    return wrapper
@dec_cache
def f_2(high):###Минимальное число справа и проверка на отсортированность counter = 0
    # counter счетчик заменыб если нуль, то отсортирован
    #####Сначала пробежим и найдем наименьший элемент
    result = False
    while not result:#Сюда надо снова подать будет список после его сортировки пополам, т.е. high из функции f_3

        index = 0
        counter = 0
        for i in range(len(high)):
            try:
                #print(high)
                # if high[index] < high[index + 1] and index==len(high):
                #     index = 0
                if high[index] < high[index + 1]:
                    high[index], high[index + 1] = high[index + 1], high[index]  ###Наименьший элемент в конце цикла окажется на последнем месте
                    index += 1
                    counter += 1
                    # print(counter, high)
                elif high[index] > high[index + 1]:
                    index += 1
                elif high[index] == high[index + 1]:
                #     ost.append(high[index])  ##Дубликат заносим в ost
                #     high.remove(high[index])  ##Дубликат убираем
                    index += 1
                #     counter += 1
                if counter == 0 and index == len(high)-1:  ##Услловие выхода из прогграммы, весь список отсортирован, ni odnogo izmenenia ne proizoshlo
                    # print(counter, high)
                    result = True## V etoi tochke dolzhen bit otsortirovannii spisok high i spisok ost s duplicarami
                    break#No pochemu to go konca nedosortirovivaet

            except IndexError:
                pass
            continue

    return high, result


import time


start = time.process_time()
high = f_2([11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 11, 11, 3, 4, 11, 7, 9, 9, 2, 4, 8, 6, 1, 9, 9,11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11,11, 9, 9, 7, 11, 11, 9, 9, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 11, 11, 3, 4, 11, 7, 9, 9, 2, 4, 8, 6, 1, 9, 911, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11,11, 9, 9, 7, 11, 11, 9, 9, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 11, 11, 3, 4, 11, 7, 9, 9, 2, 4, 8, 6, 1, 9, 9,11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11,11, 9, 9, 7, 11, 11, 9, 9, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 11, 11, 3, 4, 11, 7, 9, 9, 2, 4, 8, 6, 1, 9, 9])
print(time.process_time() - start)
#0.09375
#0.078125 Nemnogo luche s cashem

# def partition(nums, low, high):
#     # Выбираем средний элемент в качестве опорного
#     # Также возможен выбор первого, последнего
#     # или произвольного элементов в качестве опорного
#     pivot = nums[(low + high) // 2]
#     i = low - 1
#     j = high + 1
#     while True:
#         i += 1
#         while nums[i] < pivot:
#             i += 1
#
#         j -= 1
#         while nums[j] > pivot:
#             j -= 1
#
#         if i >= j:
#             return j
#
#         # Если элемент с индексом i (слева от опорного) больше, чем
#         # элемент с индексом j (справа от опорного), меняем их местами
#         nums[i], nums[j] = nums[j], nums[i]
#
# def quick_sort(nums):
#     # Создадим вспомогательную функцию, которая вызывается рекурсивно
#     def _quick_sort(items, low, high):
#         if low < high:
#             # This is the index after the pivot, where our lists are split
#             split_index = partition(items, low, high)
#             _quick_sort(items, low, split_index)
#             _quick_sort(items, split_index + 1, high)
#
#
#     _quick_sort(nums, 0, len(nums) - 1)
#
# # Проверяем, что все работает
#
#
# # import time
# # start = time.process_time()
# random_list_of_nums = [11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 11, 11, 3, 4, 11, 7, 9, 9, 2, 4, 8, 6, 1, 9, 9,11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11,11, 9, 9, 7, 11, 11, 9, 9, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 11, 11, 3, 4, 11, 7, 9, 9, 2, 4, 8, 6, 1, 9, 911, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11,11, 9, 9, 7, 11, 11, 9, 9, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 11, 11, 3, 4, 11, 7, 9, 9, 2, 4, 8, 6, 1, 9, 9,11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11,11, 9, 9, 7, 11, 11, 9, 9, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 1, 11, 11, 9, 9, 7, 4, 8, 6, 4, 3, 9, 9, 2, 1, 11, 11, 3, 4, 11, 7, 9, 9, 2, 4, 8, 6, 1, 9, 9]
# quick_sort(random_list_of_nums)
# print(random_list_of_nums)
# print(time.process_time() - start)
##Tut nulii po vremeni, bez variantov
